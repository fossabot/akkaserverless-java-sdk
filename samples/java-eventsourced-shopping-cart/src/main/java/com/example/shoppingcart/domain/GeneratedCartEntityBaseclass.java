/*
 * Copyright 2021 Lightbend Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.shoppingcart.domain;

import com.akkaserverless.javasdk.eventsourcedentity.CommandContext;
import com.akkaserverless.javasdk.eventsourcedentity.EventContext;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedContext;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntityBase;
import com.example.shoppingcart.ShoppingCartApi;
import com.google.protobuf.Empty;

// This class would be generated by codegen
// and then extended by the user

/** An event sourced entity. */
public abstract class GeneratedCartEntityBaseclass
    extends EventSourcedEntityBase<ShoppingCartDomain.Cart> {

  protected final String entityId;

  public GeneratedCartEntityBaseclass(String entityId) {
    this.entityId = entityId;
  }

  @Override
  protected abstract ShoppingCartDomain.Cart emptyState();

  // FIXME ordering most stable params to least rather means it should be: context, state, command?
  public abstract Effect<Empty> addItem(
      ShoppingCartDomain.Cart currentState,
      ShoppingCartApi.AddLineItem command,
      CommandContext context);

  public abstract Effect<Empty> removeItem(
      ShoppingCartDomain.Cart currentState,
      ShoppingCartApi.RemoveLineItem command,
      CommandContext context);

  public abstract Effect<ShoppingCartApi.Cart> getCart(
      ShoppingCartDomain.Cart currentState,
      ShoppingCartApi.GetShoppingCart command,
      CommandContext context);

  protected abstract ShoppingCartDomain.Cart itemAdded(
      ShoppingCartDomain.Cart currentState,
      ShoppingCartDomain.ItemAdded event,
      EventContext context);

  protected abstract ShoppingCartDomain.Cart itemRemoved(
      ShoppingCartDomain.Cart currentState,
      ShoppingCartDomain.ItemRemoved event,
      EventContext context);
}
